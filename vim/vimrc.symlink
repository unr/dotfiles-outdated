set nocompatible               " be iMproved
syntax enable
filetype off                   " required!
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" load all plugins
source $HOME/.vim/packages.vim

" set up splits
set splitbelow
set splitright

set encoding=utf-8

filetype plugin indent on

call togglebg#map("<F5>")

"shell
set shell=/bin/bash

" Some view/ux related stuff
set background=dark
colorscheme Tomorrow-Night-Eighties
set ruler                       " show the cursor position all the time
set number                      " show line numbers
set cursorline                  " draw a line on the same as the cursor position
set mouse=a                     " enable mouse support
set showcmd                     " display incomplete commands
set title                       " set the screen title to the currently opened file
set gcr=n:blinkon0              " stop blinking cursors
set laststatus=2                " for powerline visiblity
set cmdheight=2
let g:Powerline_symbols = 'fancy'
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_auto_loc_list=1

" Allow backgrounding buffers without writing them, and remember marks/undo
" for backgrounded buffers
set hidden
set undofile                    " Save undo's after file closes
set undodir=~/.vim/undo         " where to save undo histories

" This sends all yanks to the system clipboard (requires building vim with
" +clipboard support)
set clipboard=unnamed

" Turn backup off, since most stuff is in SVN, git anyway...
set nobackup
set nowb
set noswapfile

"" Whitespace
set nowrap                        " don't wrap lines
set tabstop=2                     " a tab is two spaces
set shiftwidth=2                  " an autoindent (with <<) is two spaces
" set expandtab                     " use spaces, not tabs
set list                          " Show invisible characters
set backspace=indent,eol,start    " backspace through everything in insert mode

" List chars
set listchars=""                  " Reset the listchars
set listchars=tab:\ \             " a tab should display as "  ", trailing whitespace as "."
set listchars+=trail:.            " show trailing spaces as dots
set listchars+=extends:>          " The character to show in the last column when wrap is
                                  " off and the line continues beyond the right of the screen
set listchars+=precedes:<         " The character to show in the first column when wrap is
                                  " off and the line continues beyond the left of the screen
"" Searching
set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter
set cc=80                       " set colorcolumn 80 to visualize 80th column

nnoremap Q <Nop>

set wildmenu
set wildmode=list:longest,full

function s:setupWrapping()
  set wrap
  set wrapmargin=2
  set textwidth=72
endfunction

if has("autocmd")
  " In Makefiles, use real tabs, not tabs expanded to spaces
  au FileType make set noexpandtab

  " Make sure all markdown files have the correct filetype set and setup wrapping
  au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt} setf markdown | call s:setupWrapping()

  au BufRead,BufNewFile coffee setf coffee
  au BufRead,BufNewFile Jakefile setf javascript
  au BufRead,BufNewFile [Vv]olofile setf javascript
  au BufNewFile,BufRead *.jst set ft=html
  au BufNewFile,BufRead *.jeco set ft=eco

  " Treat JSON files like JavaScript
  au FileType conf set ft=sh
  au BufNewFile,BufRead *.conf set ft=sh

  " make Python follow PEP8 ( http://www.python.org/dev/peps/pep-0008/ )
  au FileType python set softtabstop=4 tabstop=4 shiftwidth=4 textwidth=79

  " Remember last location in file, but not for commit messages.
  " see :help last-position-jump
  au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g`\"" | endif
endif

" provide some context when editing
set scrolloff=3


"" Mappings
let mapleader=";"
let maplocalleader=";"

" clear the search buffer when hitting ;return
map <silent> <leader><cr> :noh<cr>

" double percentage sign in command mode is expanded
" to directory of current file - http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" Map space to / (search) and c-space to ? (backgwards search)
map <space> /
map <c-space> ?

" Quickfix open
nnoremap <leader>qo :copen<CR>

" Quickfix close
nnoremap <leader>qc :ccl<CR>

" Ack
nnoremap <leader>a :Ack 

" Ack for the last search.
nnoremap <silent> <leader>qa/ :execute "Ack! '" . substitute(substitute(substitute(@/, "\\\\<", "\\\\b", ""), "\\\\>", "\\\\b", ""), "\\\\v", "", "") . "'"<CR>

" toggle last buffer
nnoremap <leader><leader> <c-^>

" goto previous buffer, then delete previous buffer (close buffer, keep split)
nmap <leader>d :b#<bar>bd#<CR>

" easier navigation between split windows
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" disable cursor keys in normal mode 
" map <Left>  :echo "no!"<cr>
" map <Right> :echo "no!"<cr>
" map <Up>    :echo "no!"<cr>
" map <Down>  :echo "no!"<cr>

"" Plugin config

" NERDTree
nnoremap <leader>n :NERDTreeToggle<CR>

" quit NERDTree after opening a file
let g:NERDTreeQuitOnOpen = 0

" CoffeeTags
let g:tagbar_type_coffee = {
  \ 'kinds' : [
  \   'f:functions',
  \   'o:object'
  \ ],
  \ 'kind2scope' : {
  \  'f' : 'object',
  \   'o' : 'object'
  \},
  \ 'sro' : ".",
  \ 'ctagsbin' : 'coffeetags',
  \ 'ctagsargs' : ' ',
  \}

"coffee compile
vmap <leader>c <esc>:'<,'>:CoffeeCompile<CR>
map <leader>c :CoffeeCompile<CR>

"autoclose
nmap <unique> <Leader>ac <Plug>ToggleAutoCloseMappings

" c:number to jump coffee/js
command -nargs=1 C CoffeeCompile | :<args>

" CtrlP
let g:ctrlp_extensions = ['tag']
let g:ctrlp_match_window_bottom = 1
let g:ctrlp_match_window_reversed = 1
" let g:ctrlp_working_path_mode = 'rw'
let g:ctrlp_dotfiles = 0 "so ctrlp won't search dotfiles/dotdirs
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_map = '<leader>f'
let g:ctrlp_custom_ignore = 'build'
let g:ctrlp_follow_symlinks = 1

" Paste last yanked item, even after deleting.
noremap <Leader>p "0p
noremap <Leader>P "0P

"syntastic
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['scss'] }

map <leader>j :call ToggleJournal()<CR>

" Toggle Taskpaper Journal
let g:journal_toggle=0

function ToggleJournal()
  if g:journal_toggle
      :bd journal.taskpaper
      let g:journal_toggle=0
  else
      :split ~/Dropbox/TODO/journal.taskpaper
      let g:journal_toggle=1
  endif
endfunction

let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_auto_select = 1
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_enable_auto_delimiter = 1

" Recommended key-mappings.
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" Pressing `enter` will complete word and close completion menu.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
    return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
endfunction"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RUNNING TESTS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>t :call RunTestFile()<cr>
" map <leader>a :call RunTests('')<cr>
" map <leader>T :call RunNearestTest()<cr>

function! RunTestFile(...)
    if a:0
        let command_suffix = a:1
    else
        let command_suffix = ""
    endif

    " Run the tests for the previously-marked file.
    let in_test_file = match(expand("%"), '\(._spec.coffee\)$') != -1
    if in_test_file
        call SetTestFile()
    elseif !exists("t:grb_test_file")
        return
    end
    call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
    let spec_line_number = line('.')
    call RunTestFile(":" . spec_line_number . " -b")
endfunction

function! SetTestFile()
    " Set the spec file that tests will be run for.
    let t:grb_test_file=@%
endfunction

function! RunTests(filename)
    " Write the file and run tests for the given filename
    :w
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    if filereadable("bin/test")
      exec ":!bin/test " . a:filename
    else
      exec ":!node_modules/.bin/mocha " . a:filename
    end
endfunction

" open .vimrc
nmap <leader>v :tabnew ~/.vimrc <cr>

" ternjs settings
autocmd BufEnter *.js set updatetime=500
let g:tern_show_argument_hints = 'on_hold'
let g:tern_map_keys = 1


" keychord bindings
call arpeggio#map('i', '', 0, 'jk', '<Esc>') " jk | esc

" call arpeggio#map('n', '', 0, 'jk', '<C-d>') " jk | page down
" call arpeggio#map('n', '', 0, 'fd', '<C-u>') " fd | page up
